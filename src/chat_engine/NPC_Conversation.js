import { Character } from "./Character.js";
import { LLM_Model } from "./LLM_Model.js";

let CONVERSATION_DEFAULT_VARIABLES = {
	INITIAL_INSTRUCTION:
		"Act as a game character. Reply according to the following information.\n",
	FURTHER_INSTRUCTIONS: `Don't disclose the character statistics. Try to keep the answers short.`,
	GREETINGS: "\n\nSay hi to the player",
};

export class NPCConversation {
	/**
	 * NPC conversation object. Creates context for the AI model and manages the conversation flow
	 * @param {LLM_Model} model AI model for generating responses
	 * @param {Character} character Character object
	 */
	constructor(model, character) {
		this.LLM_Model = model;
		this.character = character;
		this.location = null;
		this.player = null;

		this.messagesStream = [];

		

		/**
		 * Start a conversation with an NPC. The function return the greeting.
		 * @param {string} context context of the conversation generated by initialiseConversation()
		 * @returns a string representing the reply of the NPC
		 */
		this.startConversation = async (context, llm_model) => {
			const msg = LLM_Model.createRoleContentPair(context, "system");
			this.messagesStream.push(msg);

			try {
				const response = await llm_model.generateResponse(
					this.messagesStream
				);

				// Validate response here to do

				this.messagesStream.push(response);

				return response.content;
			} catch (error) {
				console.error("Conversation initialisation error:", error);
			}
		};

		this.takeAction = async (llm_model) => {
			const action_list = [
				"continue conversation (default)",
				"terminate conversation",
				"generate quest",
				"give object",
				"attack",
			];

			let message = `Based on the conversation, choose one of the following actions: `;

			action_list.forEach((action) => {
				message += `${action}\n`;
			});

			const msg = LLM_Model.createRoleContentPair(message, "system");

			const action = await llm_model.generateResponse(msg);
		};

		/**
		 * Generate an answer based on a message from the player
		 * @param {string} message Message to be sent to the ai model
		 * @param {string} role who is sending the message (player, character, system)
		 * @returns string witht the answer from the model
		 */
		this.chat = async (message, llm_model) => {
			const msg = LLM_Model.createRoleContentPair(message, "user");
			this.messagesStream.push(msg);

			try {
				const response = await llm_model.generateResponse(
					this.messagesStream
				);
				this.messagesStream.push(response);
				console.log(response);

				return response.content;
				
			} catch (error) {
				console.error("Chat error:", error);
			}
		};

		this.closeConversation = () => {};
	}
}


export function initialiseConversation(character){
	let context = ``;

	context += CONVERSATION_DEFAULT_VARIABLES.INITIAL_INSTRUCTION;

	// Charachter info
	context += `Character name: ${character.name}\n`
	context += `Character background: ${character.background}\n`;

	//Character statistics
	if (character.statistics && character.statistics.length) {
		let qualitites = character.statistics;
		let str = ``;
		for (let i = 0; i < qualitites.length -1; i++)
			str += qualitites[i] + ", ";

		if (qualitites.length>1) str += "and ";
		str += qualitites[qualitites.length - 1];
		context += `${character.name} is ${str}.\n`;
	}

	// Character inventory
	let items_owned = "";
	if (character.inventory.items) {
		character.inventory.items.forEach((i) => {
			items_owned += `, ${i}`;
		});
	} else {
		items_owned = " and nothing else.";
	}

	context += `The character owns these objects: ${character.inventory.gold} gold${items_owned}\n`;



	// Player info
	// context  += this.player_info;

	// Location info
	// context  += this.location_info;

	context += CONVERSATION_DEFAULT_VARIABLES.FURTHER_INSTRUCTIONS;
	context += CONVERSATION_DEFAULT_VARIABLES.GREETINGS;

	return context;
};