import { Character } from "./Character.js";
import { LLM_Model } from "./LLM_Model.js";

let CONVERSATION_DEFAULT_VARIABLES = {
	INITIAL_INSTRUCTION:
		"Act as a game character. Reply according to the following information.\n",
	FURTHER_INSTRUCTIONS: `Don't disclose the character statistics. Try to keep the answers short.`,
	GREETINGS: "\n\nSay hi to the player",
};

export class NPCConversation {
	/**
	 * NPC conversation object. Creates context for the AI model and manages the conversation flow
	 * @param {LLM_Model} model AI model for generating responses
	 * @param {Character} character Character object
	 */
	constructor(model, character) {
		this.LLM_Model = model;
		this.character = character;
		this.location = null;
		this.player = null;

		this.messagesStream = [];
	}

	initialiseConversation() {
		let context = ``;

		context += CONVERSATION_DEFAULT_VARIABLES.INITIAL_INSTRUCTION;

		// Charachter info
		context += `Character background: ${this.character.background}\n`;
		this.character.items;

		// Character inventory
		let items_owned = "";
		if (this.character.inventory.items) {
			this.character.inventory.items.forEach((i) => {
				items_owned += `, ${i}`;
			});
		} else {
			items_owned = " and nothing else.";
		}

		context += `The character owns these objects: ${this.character.inventory.gold} gold${items_owned}\n`;

		//Character statistics
		// context  += `${this.character.stats}`;

		// Player info
		// context  += this.player_info;

		// Location info
		// context  += this.location_info;

		context += CONVERSATION_DEFAULT_VARIABLES.FURTHER_INSTRUCTIONS;
		context += CONVERSATION_DEFAULT_VARIABLES.GREETINGS;

		return context;
	}

	/**
	 * Start a conversation with an NPC. The function return the greeting.
	 * @param {string} context context of the conversation generated by initialiseConversation()
	 * @returns a string representing the reply of the NPC
	 */
	async startConversation(context) {
		const msg = LLM_Model.createRoleContentPair(context, "system");
		this.messagesStream.push(msg);

		try {
			const response = await this.LLM_Model.generateResponse(
				this.messagesStream
			);

			// Validate response here to do

			this.messagesStream.push(response);

			return response.content;
		} catch (error) {
			console.error("Conversation initialisation error:", error);
		}
	}

	async takeAction() {
		const action_list = [
			"continue conversation (default)",
			"terminate conversation",
			"generate quest",
			"give object",
			"attack",
		];

		let message = `Based on the conversation, choose one of the following actions: `;

		action_list.forEach((action) => {
			message += `${action}\n`;
		});

		const msg = LLM_Model.createRoleContentPair(message, 'system');

		const action = await this.LLM_Model.generateResponse(msg);
	}

	/**
	 * Generate an answer based on a message from the player
	 * @param {string} message Message to be sent to the ai model
	 * @param {string} role who is sending the message (player, character, system)
	 * @returns string witht the answer from the model
	 */
	async chat(message) {
		const msg = LLM_Model.createRoleContentPair(message, "user");
		this.messagesStream.push(msg);

		try {
			const response = this.LLM_Model.generateResponse(this.messagesStream);
			this.messagesStream.push(response);

			return 
		} catch (error) {
			console.error("Chat error:", error);
		}
	} 

	closeConversation() {}
}
